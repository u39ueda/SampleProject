//
//  LoginPresenter.swift
//  SampleProject
//
//  Created by 植田裕作 on 2018/10/08.
//  Copyright © 2018年 Yusaku Ueda. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation
import RxSwift
import RxCocoa

final class LoginPresenter: LoginPresenterProtocol {

    // MARK: Properties

    private weak var view: LoginViewProtocol?
    private let router: LoginWireframeProtocol
    private let isLoginExecuting = BehaviorRelay<Bool>(value: false)

    // MARK: - Life cycle

    init(interface: LoginViewProtocol, router: LoginWireframeProtocol) {
        self.view = interface
        self.router = router
    }

    deinit {
    }

    // MARK: - PresenterProtocol

    // MARK: ViewController -> Presenter

    func viewDidLoad() {
    }

    func viewWillAppear(_ animated: Bool) {
    }

    func viewDidAppear(_ animated: Bool) {
    }

    func viewWillDisappear(_ animated: Bool) {
    }

    func viewDidDisappear(_ animated: Bool) {
    }

    func onLoginButton(memberId: String, password: String) {
        print(#function, "start")
        isLoginExecuting.accept(true)
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            print(#function, "finish execute")
            self.isLoginExecuting.accept(false)
        }
        print(#function, "finish")
    }

    // MARK: Presenter -> ViewController

    /// ログインの有効フラグ
    var isLoginEnabled: Observable<Bool> {
        return isLoginExecuting.map({ !$0 })
    }
    /// ローディング中フラグ
    var isLoading: Observable<Bool> {
        return isLoginExecuting.asObservable()
    }
}
