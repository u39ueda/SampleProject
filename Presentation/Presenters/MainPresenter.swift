//
//  MainPresenter.swift
//  SampleProject
//
//  Created by 植田裕作 on 2018/10/08.
//  Copyright © 2018年 Yusaku Ueda. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Model
import RxSwift
import RxCocoa

final class MainPresenter: MainPresenterProtocol {

    // MARK: Properties

    private weak var view: MainViewProtocol?
    private let router: MainWireframeProtocol
    var accountRepository: AccountRepositoryProtocol?
    private let disposeBag = DisposeBag()
    private let isLoginRelay = BehaviorRelay<Bool>(value: false)
    private let userInformationRelay = BehaviorRelay<MainUserInformationViewObject>(value: .init())

    // MARK: - Life cycle

    init(interface: MainViewProtocol, router: MainWireframeProtocol) {
        self.view = interface
        self.router = router
    }

    deinit {
    }

    // MARK: - PresenterProtocol

    // MARK: ViewController -> Presenter

    func viewDidLoad() {
        accountRepository?.currentCredential
            .subscribe(onNext: { [weak self] (credential: CredentialEntity) in
            self?.isLoginRelay.accept(credential.isLogin)
        }).disposed(by: disposeBag)
    }

    func viewWillAppear(_ animated: Bool) {
    }

    func viewDidAppear(_ animated: Bool) {
    }

    func viewWillDisappear(_ animated: Bool) {
    }

    func viewDidDisappear(_ animated: Bool) {
    }

    // MARK: Presenter -> ViewController

    /// 購読可能なログイン済みフラグ
    var isLoginValue: Observable<Bool> {
        return isLoginRelay.asObservable()
            .distinctUntilChanged() // 値が変化した時のみ通知する
    }

    /// ユーザ情報
    var userInformationValue: Observable<MainUserInformationViewObject> {
        return userInformationRelay.asObservable()
    }
}

// MARK: - Action

extension MainPresenter {
    func onLoginButton() {
        router.showLogin()
    }
}
