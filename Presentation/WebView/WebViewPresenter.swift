//
//  WebViewPresenter.swift
//  SampleProject
//
//  Created by 植田裕作 on 2018/11/06.
//  Copyright © 2018年 Yusaku Ueda. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Common
import Model
import RxSwift

final class WebViewPresenter: WebViewPresenterProtocol {

    // MARK: Properties

    private weak var view: WebViewViewProtocol?
    private let router: WebViewWireframeProtocol
    private let disposeBag = DisposeBag()

    // MARK: - Life cycle

    init(interface: WebViewViewProtocol, router: WebViewWireframeProtocol) {
        self.view = interface
        self.router = router
    }

    deinit {
        log.debug()
    }

    // MARK: - PresenterProtocol

    // MARK: ViewController -> Presenter

    func viewDidLoad() {
        log.debug()
    }

    func viewWillAppear(_ animated: Bool) {
        log.debug()
    }

    func viewDidAppear(_ animated: Bool) {
        log.debug()
    }

    func viewWillDisappear(_ animated: Bool) {
        log.debug()
    }

    func viewDidDisappear(_ animated: Bool) {
        log.debug()
    }

    /// 戻るボタンが押された時
    func onBackButton() {
        router.close()
    }

    /// 前へ戻るボタンが押された時
    func onBackwardButton() {
        view?.goToBackward()
    }

    /// 次へ進むボタンが押された時
    func onForwardButton() {
        view?.goToForward()
    }

    /// 更新ボタンが押された時
    func onRefreshButton() {
        view?.reloadPage()
    }

    // MARK: Presenter -> ViewController

    public func setupRequest<T: ObservableConvertibleType>(_ observable: T) where T.E: URLRequestConvertible {
        observable.asObservable().subscribe(onNext: { [weak view] (request) in
            // リクエストが生成できたのでロード開始
            view?.startLoadRequest(request.nm_request)
        }, onError: { [weak self] (error) in
            // 事前処理でエラーが発生
            self?.processPrepareError(error)
        }).disposed(by: disposeBag)
    }
}

// MARK: - Methods

extension WebViewPresenter {
    /// 事前処理で発生したエラーを処理する
    private func processPrepareError(_ error: Error) {
        log.warning("error=\(error)")
    }
}
