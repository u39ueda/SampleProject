//
//  WebViewRouter.swift
//  SampleProject
//
//  Created by 植田裕作 on 2018/11/06.
//  Copyright © 2018年 Yusaku Ueda. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Common
import Model
import RxSwift

final class WebViewRouter: WebViewWireframeProtocol {

    // MARK: Properties

    private weak var viewController: WebViewViewController?

    /// Factory method
    static func createModule<T: URLRequestConvertible>(request: T) -> WebViewViewController {
        return createModule(Single.just(request))
    }

    static func createModule<T: ObservableConvertibleType>(_ observable: T) -> WebViewViewController where T.E: URLRequestConvertible {
        let view = WebViewViewController()
        let router = WebViewRouter()
        let presenter = WebViewPresenter(interface: view, router: router)

        view.presenter = presenter
        router.viewController = view

        // リクエストを設定
        presenter.setupRequest(observable)

        return view
    }

    // MARK: - Life cycle

    private init() {
    }

    deinit {
        log.debug()
    }

    // MARK: - WireframeProtocol

    /// 画面を閉じる
    func close() {
        viewController?.presentingViewController?.dismiss(animated: true, completion: nil)
    }
}
