//
//  LoginPresenter.swift
//  SampleProject
//
//  Created by 植田裕作 on 2018/10/08.
//  Copyright © 2018年 Yusaku Ueda. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation
import Common
import Model
import RxSwift
import RxCocoa

final class LoginPresenter: LoginPresenterProtocol {

    // MARK: Properties

    private weak var view: LoginViewProtocol?
    private let router: LoginWireframeProtocol
    var loginUsecase: LoginUsecaseProtocol?
    private let isLoginExecuting = BehaviorRelay<Bool>(value: false)
    private let loginDisposable = SerialDisposable()

    // MARK: - Life cycle

    init(interface: LoginViewProtocol, router: LoginWireframeProtocol) {
        self.view = interface
        self.router = router
    }

    deinit {
    }

    // MARK: - PresenterProtocol

    // MARK: ViewController -> Presenter

    func viewDidLoad() {
    }

    func viewWillAppear(_ animated: Bool) {
    }

    func viewDidAppear(_ animated: Bool) {
    }

    func viewWillDisappear(_ animated: Bool) {
    }

    func viewDidDisappear(_ animated: Bool) {
    }

    func onLoginButton(memberId: String, password: String) {
        guard let loginUsecase = loginUsecase else { return }
        log.info("start: memberId=\(memberId), password=\(password)")
        // ログイン実行中フラグON
        isLoginExecuting.accept(true)
        // ログイン処理開始
        let disposable = loginUsecase.login(memberId: memberId, password: password)
            .subscribe(onSuccess: {
                // ログイン処理成功
                log.info("finish execute")
                // ログイン実行中フラグOFF
                self.isLoginExecuting.accept(false)
                // ログイン画面を閉じる
                self.router.closeLogin()
            }, onError: { (error: Error) in
                // ログイン処理失敗
                log.info("failure execute. error=\(error)")
                // ログイン実行中フラグOFF
                self.isLoginExecuting.accept(false)
                // TODO: エラーメッセージ表示
            })
        // 前回のログイン処理をキャンセルして今回のログイン処理を保持
        loginDisposable.disposable = disposable
        log.info("finish")
    }

    // MARK: Presenter -> ViewController

    /// ログインの有効フラグ
    var isLoginEnabled: Observable<Bool> {
        return isLoginExecuting.map({ !$0 })
    }
    /// ローディング中フラグ
    var isLoading: Observable<Bool> {
        return isLoginExecuting.asObservable()
    }
}
